"use strict";(self.webpackChunkredux_cool_website=self.webpackChunkredux_cool_website||[]).push([[903],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4216:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],c={sidebar_position:2,title:"Reducer Tree"},l=void 0,p={unversionedId:"concepts/reducer-tree",id:"concepts/reducer-tree",isDocsHomePage:!1,title:"Reducer Tree",description:"In Redux Cool,  the reducers are created with the help of a reducer tree - the reducer tree is a nested javascript object in which action-handler functions are defined. Each action-handler has its logical place in the reducer tree. The hierarchical order of action-handlers enables us to define reducer-logic in a grouped and visual form.",source:"@site/docs/concepts/reducer-tree.md",sourceDirName:"concepts",slug:"/concepts/reducer-tree",permalink:"/docs/concepts/reducer-tree",editUrl:"https://github.com/Redux-Cool/redux-cool/edit/master/website/docs/concepts/reducer-tree.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Reducer Tree"},sidebar:"docs",previous:{title:"Redux-Cool Concepts",permalink:"/docs/concepts"},next:{title:"Reducers Creator",permalink:"/docs/concepts/reducers-creator"}},u=[],s={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In ",(0,o.kt)("strong",{parentName:"p"},"Redux Cool"),",  the reducers are created with the help of a ",(0,o.kt)("strong",{parentName:"p"},"reducer tree")," - the ",(0,o.kt)("strong",{parentName:"p"},"reducer tree")," is a nested javascript object in which ",(0,o.kt)("strong",{parentName:"p"},"action-handler")," functions are defined. Each ",(0,o.kt)("strong",{parentName:"p"},"action-handler")," has its logical place in the ",(0,o.kt)("strong",{parentName:"p"},"reducer tree"),". The hierarchical order of ",(0,o.kt)("strong",{parentName:"p"},"action-handlers")," enables us to define reducer-logic in a grouped and visual form."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example:")," Reducer Tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const products_reducer_tree = {\n    // phone\n    PHONE: {\n        FETCH: {\n            START: (state, action) => {\n                // ...\n            },\n            SUCCESS: (state, action) => {\n                // ...\n            },\n            FAIL: (state, action) => {\n                // ...\n            }\n        },\n        UPDATE: {\n            PRICE: (state, action) => {\n                // ...\n            },\n            DISCOUNT: (state, action) => {\n                // ...\n            }\n        },\n        CLEAR: (state, action) => {\n            // ...\n        }\n    },\n\n    // laptop\n    LAPTOP: {\n        FETCH: {\n            START: (state, action) => {\n                // ...\n            },\n            SUCCESS: (state, action) => {\n                // ...\n            },\n            FAIL: (state, action) => {\n                // ...\n            }\n        },\n        UPDATE: {\n            VERSION: (state, action) => {\n                // ...\n            },\n            IMAGE: (state, action) => {\n                // ...\n            }\n        },\n        CLEAR: (state, action) => {\n            // ...\n        }\n    }\n}\n")),(0,o.kt)("p",null,"As we can see in the above mentioned example, we defined the object of ",(0,o.kt)("inlineCode",{parentName:"p"},"products_reducer_tree"),", in which 12 action handlers are defined in a hierarchic form."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.FETCH.START")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.FETCH.SUCCESS")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.FETCH.FAIL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.UPDATE.PRICE")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.UPDATE.DISCOUNT")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PHONE.CLEAR")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.FETCH.START")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.FETCH.SUCCESS")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.FETCH.FAIL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.UPDATE.VERSION")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.UPDATE.IMAGE")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LAPTOP.CLEAR"))),(0,o.kt)("p",null,"This was just a simple example to show you what the reducer tree is."),(0,o.kt)("p",null,"In the next part, we will see how to create reducer function with the help of reducer-tree."))}d.isMDXComponent=!0}}]);
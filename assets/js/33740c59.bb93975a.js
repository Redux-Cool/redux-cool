"use strict";(self.webpackChunkredux_cool_website=self.webpackChunkredux_cool_website||[]).push([[117],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6914:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:3,title:"Reducers Creator"},c=void 0,s={unversionedId:"concepts/reducers-creator",id:"concepts/reducers-creator",isDocsHomePage:!1,title:"Reducers Creator",description:"reducersCreator is a helper function with which we create reducer functions for Redux.",source:"@site/docs/concepts/reducers-creator.md",sourceDirName:"concepts",slug:"/concepts/reducers-creator",permalink:"/docs/concepts/reducers-creator",editUrl:"https://github.com/Redux-Cool/redux-cool/edit/master/website/docs/concepts/reducers-creator.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Reducers Creator"},sidebar:"docs",previous:{title:"Reducer Tree",permalink:"/docs/concepts/reducer-tree"},next:{title:"Actions Creator",permalink:"/docs/concepts/actions-creator"}},p=[{value:"Instalation",id:"instalation",children:[]},{value:"Usage",id:"usage",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"reducersCreator")," is a helper function with which we create reducer functions for Redux."),(0,o.kt)("h3",{id:"instalation"},"Instalation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install redux-cool\n")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import {reducersCreator} from "redux-cool"\n\nconst initial_state = {\n    profile: {\n        data: null,\n        loading: false,\n    }\n}\n\nconst account_reducer_tree = {\n    PROFILE: {\n        FETCH: {\n            START: (state, action) => {\n                state.profile.loading = true\n            },\n            SUCCESS: (state, action) => {\n                const [data] = action.args\n                state.profile.data = data\n                state.profile.loading = false\n            },\n            FAIL: (state, action) => {\n                state.profile.loading = false\n            }\n        },\n        UPDATE: {\n            EMAIL: (state, action) => {\n                const [email] = action.args\n                state.profile.data.email = email\n            },\n            USERNAME: (state, action) => {\n                const [username] = action.args\n                state.profile.data.username = username\n            }\n        }\n    },\n    CLEAR: (state, action) => {\n        return initial_state\n    }\n}\n\nconst accountReducer = reducersCreator(\n    "ACCOUNT",\n    initial_state,\n    account_reducer_tree,\n)\n\nexport default accountReducer\n')),(0,o.kt)("p",null,"As you can see in the example above, we create an ",(0,o.kt)("strong",{parentName:"p"},"accountReducer")," by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"reducersCreator")," function and passing it three arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},'"ACCOUNT"'))," : It's a ",(0,o.kt)("em",{parentName:"li"},"name")," of the reducer, it can be any string."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"initial_state"))," : It's a ",(0,o.kt)("em",{parentName:"li"},"initial state")," of the reducer, it can be any object."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"account_reducer_tree"))," :  It's a ",(0,o.kt)("em",{parentName:"li"},(0,o.kt)("a",{parentName:"em",href:"/docs/concepts/reducer-tree"},"reducer tree"))," object, in which the action handlers are defined - as an argument ",(0,o.kt)("em",{parentName:"li"},"action handler functions")," take ",(0,o.kt)("strong",{parentName:"li"},"state")," and ",(0,o.kt)("strong",{parentName:"li"},"action")," and update the state. It automatically uses the ",(0,o.kt)("a",{parentName:"li",href:"https://immerjs.github.io/immer/"},"immer library")," to do ",(0,o.kt)("strong",{parentName:"li"},"immutable updates")," with normal mutative code, like ",(0,o.kt)("inlineCode",{parentName:"li"},"state.profile.data.email = email"),". There is no need to manually do immutable updates and return the result. If you are not familiar with the ",(0,o.kt)("a",{parentName:"li",href:"https://immerjs.github.io/immer/"},"immer library"),", please look at it, it is very important.")),(0,o.kt)("p",null,"As a result, we get the ",(0,o.kt)("strong",{parentName:"p"},"accountReducer")," function, which can handle the following type of actions:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Global Context"),(0,o.kt)("th",{parentName:"tr",align:null},"Local Context"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"PROFILE/FETCH/START"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/PROFILE/FETCH/START"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"PROFILE/FETCH/SUCCESS"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/PROFILE/FETCH/SUCCESS"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"PROFILE/FETCH/FAIL"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/PROFILE/FETCH/FAIL"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"PROFILE/UPDATE/EMAIL"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/PROFILE/UPDATE/EMAIL"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"PROFILE/UPDATE/USERNAME"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/PROFILE/UPDATE/USERNAME"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"CLEAR"')),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'"ACCOUNT/CLEAR"'))))),(0,o.kt)("p",null,"As you can see, each handler can work with ",(0,o.kt)("strong",{parentName:"p"},"two")," types of actions (",(0,o.kt)("strong",{parentName:"p"},"Global")," and ",(0,o.kt)("strong",{parentName:"p"},"Local"),"), first consisting of the path described in ",(0,o.kt)("em",{parentName:"p"},"reducerTree"),", the second is the same as the first type plus the reducer name that should be added in the beginning like ",(0,o.kt)("inlineCode",{parentName:"p"},'"CLEAR"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"ACCOUNT/CLEAR"'),". That is the most important and useful feature of this library. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/global-and-local-actions"},"Global and Local Actions")," for more details."))}d.isMDXComponent=!0}}]);